{
  "version": 3,
  "sources": ["angular:jit:template:src/app/components/model-selector/model-selector.component.html", "angular:jit:style:src/app/components/model-selector/model-selector.component.css", "src/app/components/model-selector/model-selector.component.ts", "src/app/components/model-selector/model-selector.component.spec.ts"],
  "sourcesContent": ["<div class=\"relative w-full max-w-sm\">\n    <label for=\"model-select\" class=\"block mb-1 text-sm font-small\">Select Model</label>\n\n    <select id=\"model-select\" [(ngModel)]=\"selectedModelId\" (change)=\"onModelChange()\" class=\"form-select\">\n        <option *ngFor=\"let model of models\" [value]=\"model.id\">\n            {{ model.name }} ({{ model.company }})\n        </option>\n    </select>\n\n    <div class=\"absolute top-[40px] left-0 w-full mt-1 border bg-white z-10 rounded shadow\" *ngIf=\"showDetails\">\n        <div *ngFor=\"let model of models\" (click)=\"selectModel(model)\"\n            class=\"flex items-center gap-2 px-4 py-2 hover:bg-gray-100 cursor-pointer\">\n            <img [src]=\"model.logoUrl\" alt=\"{{model.name}}\" class=\"w-6 h-6 object-contain\" />\n            <div class=\"text-sm\">\n                <div class=\"font-medium\">{{ model.name }}</div>\n                <div class=\"text-xs text-gray-500\">{{ model.company }}</div>\n            </div>\n        </div>\n    </div>\n</div>", "/* src/app/components/model-selector/model-selector.component.css */\nselect {\n  cursor: pointer;\n}\nimg {\n  border-radius: 4px;\n}\n/*# sourceMappingURL=model-selector.component.css.map */\n", "import { Component, EventEmitter, OnInit, Output } from '@angular/core'\nimport { Model } from '../../entities/model'\nimport { ChatService } from '../../services/chat.service'\n\n@Component({\n  selector: 'app-model-selector',\n  standalone: false,\n  templateUrl: './model-selector.component.html',\n  styleUrl: './model-selector.component.css'\n})\nexport class ModelSelectorComponent implements OnInit {\n  models: Model[] = [];\n  selectedModelId: number = 0;\n  showDetails = false;\n\n  @Output() modelSelected = new EventEmitter<Model>();\n\n  constructor(private chatService: ChatService) {\n\n  }\n\n  ngOnInit(): void {\n    this.getModels()\n\n    const saved = localStorage.getItem('selectedModel')\n    this.selectedModelId = saved ? Number(saved) : this.models[0]?.id\n    this.modelSelected.emit(this.getModelById(this.selectedModelId))\n  }\n\n  getModels() {\n    this.chatService.getModels().subscribe(data => {\n      this.models = data\n      const savedModelId = localStorage.getItem('selectedModel')\n      if (this.models.length > 0) {\n        if (savedModelId && this.models.some(m => m.id === Number(savedModelId))) {\n          this.selectedModelId = Number(savedModelId)\n        } else {\n          this.selectedModelId = this.models[0].id\n        }\n        this.modelSelected.emit(this.getModelById(this.selectedModelId))\n      } else {\n        this.selectedModelId = 0\n      }\n    })\n  }\n\n  onModelChange() {\n    localStorage.setItem('selectedModel', this.selectedModelId.toString())\n    this.modelSelected.emit(this.getModelById(this.selectedModelId))\n  }\n\n  selectModel(model: Model) {\n    this.selectedModelId = model.id\n    this.showDetails = false\n    this.onModelChange()\n  }\n\n  private getModelById(modelId: number): Model {\n    return this.models.find(model => model.id === modelId) || this.models[0]\n  }\n}\n", "import { ComponentFixture, TestBed } from '@angular/core/testing'\n\nimport { ModelSelectorComponent } from './model-selector.component'\n\ndescribe('ModelSelector', () => {\n  let component: ModelSelectorComponent\n  let fixture: ComponentFixture<ModelSelectorComponent>\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [ModelSelectorComponent]\n    })\n      .compileComponents()\n\n    fixture = TestBed.createComponent(ModelSelectorComponent)\n    component = fixture.componentInstance\n    fixture.detectChanges()\n  })\n\n  it('should create', () => {\n    expect(component).toBeTruthy()\n  })\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,iCAAA;AAAA;AAAA,IAAAD,oCAAA;AAAA;AAAA;;;ICUa;;;;;;;AAVb;AAEA;AAQO,IAAM,yBAAN,MAAME,wBAAsB;MAOb;MANpB,SAAkB,CAAA;MAClB,kBAA0B;MAC1B,cAAc;MAEJ,gBAAgB,IAAI,aAAY;MAE1C,YAAoB,aAAwB;AAAxB,aAAA,cAAA;MAEpB;MAEA,WAAQ;AACN,aAAK,UAAS;AAEd,cAAM,QAAQ,aAAa,QAAQ,eAAe;AAClD,aAAK,kBAAkB,QAAQ,OAAO,KAAK,IAAI,KAAK,OAAO,CAAC,GAAG;AAC/D,aAAK,cAAc,KAAK,KAAK,aAAa,KAAK,eAAe,CAAC;MACjE;MAEA,YAAS;AACP,aAAK,YAAY,UAAS,EAAG,UAAU,UAAO;AAC5C,eAAK,SAAS;AACd,gBAAM,eAAe,aAAa,QAAQ,eAAe;AACzD,cAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,gBAAI,gBAAgB,KAAK,OAAO,KAAK,OAAK,EAAE,OAAO,OAAO,YAAY,CAAC,GAAG;AACxE,mBAAK,kBAAkB,OAAO,YAAY;YAC5C,OAAO;AACL,mBAAK,kBAAkB,KAAK,OAAO,CAAC,EAAE;YACxC;AACA,iBAAK,cAAc,KAAK,KAAK,aAAa,KAAK,eAAe,CAAC;UACjE,OAAO;AACL,iBAAK,kBAAkB;UACzB;QACF,CAAC;MACH;MAEA,gBAAa;AACX,qBAAa,QAAQ,iBAAiB,KAAK,gBAAgB,SAAQ,CAAE;AACrE,aAAK,cAAc,KAAK,KAAK,aAAa,KAAK,eAAe,CAAC;MACjE;MAEA,YAAY,OAAY;AACtB,aAAK,kBAAkB,MAAM;AAC7B,aAAK,cAAc;AACnB,aAAK,cAAa;MACpB;MAEQ,aAAa,SAAe;AAClC,eAAO,KAAK,OAAO,KAAK,WAAS,MAAM,OAAO,OAAO,KAAK,KAAK,OAAO,CAAC;MACzE;;;;;gCA5CC,OAAM,CAAA;;;AALI,6BAAsB,WAAA;MANlC,UAAU;QACT,UAAU;QACV,YAAY;QACZ,UAAA;;OAED;OACY,sBAAsB;;;;;ACVnC;;;AAEA,IAAAC;AAEA,aAAS,iBAAiB,MAAK;AAC7B,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,sBAAsB;SACjC,EACE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,sBAAsB;AACxD,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;IACH,CAAC;;;",
  "names": ["model_selector_component_default", "init_model_selector_component", "ModelSelectorComponent", "init_model_selector_component"]
}
